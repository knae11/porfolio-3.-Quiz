{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","console","log","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63823d59.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #f1ebdd;\r\n  border-radius: 10px;\r\n  border: 2px solid gray;\r\n  text-align: center;\r\n  padding: 30px;\r\n\r\n  p {\r\n    font-size: 30px;\r\n    font-weight: 700;\r\n  }\r\n  p > div {\r\n    margin: 24px;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 16px;\r\n    width: 50%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct ? \"green\" : !correct && userClicked ? \"red\" : \"transparent\"};\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { AnswerObject } from \"../App\";\r\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.styles\";\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNr,\r\n  totalQuestions,\r\n}) => (\r\n  <Wrapper>\r\n    <p className=\"number\">\r\n      Question: {questionNr} / {totalQuestions}\r\n    </p>\r\n    <p dangerouslySetInnerHTML={{ __html: question }} />\r\n\r\n    <div>\r\n      {answers.map((answer) => (\r\n        <ButtonWrapper\r\n          key={answer}\r\n          correct={userAnswer?.correctAnswer === answer}\r\n          userClicked={userAnswer?.answer === answer}\r\n        >\r\n          <button\r\n            disabled={userAnswer ? true : false}\r\n            value={answer}\r\n            onClick={callback}\r\n          >\r\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n          </button>\r\n        </ButtonWrapper>\r\n      ))}\r\n    </div>\r\n  </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;\r\n","import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height:100%;\r\n  }\r\n\r\n  body{\r\n    background-color:#00c6ad;\r\n    background-size: cover;\r\n    margin:0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n*{\r\n  box-sizing:border-box;\r\n  font-family:font-family: 'Noto Sans JP', sans-serif;\r\n\r\n}\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: #f85a2b;\r\n    font-weight: 700;\r\n    text-transform: uppercase;\r\n  }\r\n  .score {\r\n    font-weight: 700;\r\n    text-transform: uppercase;\r\n    color: #f85a2b;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n\r\n  h1 {\r\n    color: #1947e5;\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n\r\n  .start,\r\n  .next {\r\n    cursor: pointer;\r\n    background: #f85a2b;\r\n    font-weight: 700;\r\n    text-transform: uppercase;\r\n    border: 2px solid black;\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\nimport { fetchQuizQuestions } from \"./API\";\n//components\nimport QuestionCard from \"./components/QuestionCard\";\n//types\nimport { QuestionState, Difficulty } from \"./API\";\n//styles\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 7;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    console.log(setScore(0));\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //users answer\n      const answer = e.currentTarget.value;\n      //chech answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      //add score if answer is correct\n      if (correct) {\n        setScore((prev) => prev + 1);\n      }\n      //save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer: answer,\n        correct: correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    //Move on to the next question if not the last question\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>React Quiz</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {loading ? <p>Loading Questions...</p> : null}\n        {!loading && !gameOver ? (\n          <QuestionCard\n            key={number + 1}\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        ) : null}\n        {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}